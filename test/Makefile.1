# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR=./googletest/googletest

# Where to find user code.
USER_DIR=./src

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++17

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = 

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h



# House-keeping build targets.
.SECONDEXPANSION:
all: $$(TESTS)
.PHONY: all


.SECONDEXPANSION:
run-all: $$(TESTS)
	for test in $(TESTS); do \
		./$$test ; \
	done
.PHONY: run-all


clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o
	rm -rf  $(BDIR)
# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.



#
# Local modifications
#
BDIR = .build

TARGET_SRC = ../my-cool-project/src
TARGET_INC = $(APP_SRC)
TARGET_OBJ = $(BDIR)/excalibur_obj

TEST_SRC = ./src
TEST_OBJ = $(BDIR)/obj

MOCKS_SRC = $(TEST_SRC)/mocks
MOCKS_INC = $(MOCKS_SRC)
MOCKS_OBJ = $(TEST_OBJ)/mocks

CPPFLAGS += $(TARGET_FLAGS)
TESTS_MAKE = tests


TARGET_FLAGS = -I$(APP_INC) -I$(TEST_SRC) -g
TEST_FLAGS = $(TARGET_FLAGS)
MOCKS_FLAGS = $(TARGET_FLAGS)



#
# Pattern rules
#
$(TARGET_OBJ)/%.o: $(APP_SRC)/%.c $(APP_INC)/%.h
	@mkdir -p $(@D)
	$(CC) -c $(TARGET_FLAGS) $< -o $@

$(TEST_OBJ)/%.o: $(TEST_SRC)/%.cpp $(GTEST_HEADERS)
	@mkdir -p $(@D)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TEST_FLAGS) -c $< -o $@

$(MOCKS_OBJ)/%.o: $(MOCKS)/%.cpp $(MOCKS)/%.hpp
	@mkdir -p $(@D)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(MOCKS_FLAGS) -c $< -o $@

#
# Test targets
#
.SECONDEXPANSION:
include $(TESTS_MAKE)/*.mk

$(TESTS): $$($$@_OBJS) gtest_main.a
	@echo "Building $@: $^"
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

.PHONY: list
list:
	@echo "$(TESTS)"
